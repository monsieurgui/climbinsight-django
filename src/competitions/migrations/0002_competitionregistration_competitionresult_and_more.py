# Generated by Django 5.1.6 on 2025-02-14 21:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('competitions', '0001_initial'),
        ('leagues', '0004_category_alter_league_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CompetitionRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='pending', max_length=20, verbose_name='status')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name='registration date')),
                ('check_in_time', models.DateTimeField(blank=True, null=True, verbose_name='check in time')),
                ('bib_number', models.CharField(blank=True, max_length=10, null=True, verbose_name='bib number')),
                ('waiver_signed', models.BooleanField(default=False, verbose_name='waiver signed')),
                ('medical_clearance', models.BooleanField(default=False, verbose_name='medical clearance')),
                ('requirements_met', models.JSONField(default=dict, verbose_name='requirements met')),
            ],
            options={
                'verbose_name': 'competition registration',
                'verbose_name_plural': 'competition registrations',
            },
        ),
        migrations.CreateModel(
            name='CompetitionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.IntegerField(verbose_name='ranking')),
                ('score', models.JSONField(verbose_name='score details')),
                ('attempts', models.JSONField(default=list, verbose_name='attempts')),
                ('disqualified', models.BooleanField(default=False, verbose_name='disqualified')),
                ('disqualification_reason', models.TextField(blank=True, verbose_name='disqualification reason')),
            ],
            options={
                'verbose_name': 'competition result',
                'verbose_name_plural': 'competition results',
                'ordering': ['category', 'ranking'],
            },
        ),
        migrations.AlterModelOptions(
            name='competition',
            options={'ordering': ['start_date'], 'verbose_name': 'competition', 'verbose_name_plural': 'competitions'},
        ),
        migrations.RemoveField(
            model_name='competition',
            name='end_datetime',
        ),
        migrations.RemoveField(
            model_name='competition',
            name='start_datetime',
        ),
        migrations.AddField(
            model_name='competition',
            name='categories',
            field=models.ManyToManyField(related_name='competitions', to='leagues.category'),
        ),
        migrations.AddField(
            model_name='competition',
            name='emergency_procedures',
            field=models.JSONField(default=dict, verbose_name='emergency procedures'),
        ),
        migrations.AddField(
            model_name='competition',
            name='end_date',
            field=models.DateTimeField(null=True, verbose_name='end date'),
        ),
        migrations.AddField(
            model_name='competition',
            name='equipment_inventory',
            field=models.JSONField(blank=True, null=True, verbose_name='equipment inventory'),
        ),
        migrations.AddField(
            model_name='competition',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='active'),
        ),
        migrations.AddField(
            model_name='competition',
            name='isolation_zones',
            field=models.JSONField(blank=True, null=True, verbose_name='isolation zones'),
        ),
        migrations.AddField(
            model_name='competition',
            name='medical_staff',
            field=models.ManyToManyField(limit_choices_to={'roles__contains': ['MEDICAL_STAFF']}, related_name='medical_competitions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='competition',
            name='officials',
            field=models.ManyToManyField(limit_choices_to={'roles__contains': ['OFFICIAL']}, related_name='officiating_competitions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='competition',
            name='registration_deadline',
            field=models.DateTimeField(null=True, verbose_name='registration deadline'),
        ),
        migrations.AddField(
            model_name='competition',
            name='resource_requirements',
            field=models.JSONField(blank=True, null=True, verbose_name='resource requirements'),
        ),
        migrations.AddField(
            model_name='competition',
            name='route_setters',
            field=models.ManyToManyField(limit_choices_to={'roles__contains': ['ROUTE_SETTER']}, related_name='route_setting_competitions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='competition',
            name='safety_protocols',
            field=models.JSONField(default=dict, verbose_name='safety protocols'),
        ),
        migrations.AddField(
            model_name='competition',
            name='scoring_system',
            field=models.JSONField(default=dict, verbose_name='scoring system'),
        ),
        migrations.AddField(
            model_name='competition',
            name='start_date',
            field=models.DateTimeField(null=True, verbose_name='start date'),
        ),
        migrations.AddField(
            model_name='competition',
            name='warmup_areas',
            field=models.JSONField(default=dict, verbose_name='warmup areas'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='created at'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='description',
            field=models.TextField(verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='location',
            field=models.JSONField(default=dict, verbose_name='location'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='name',
            field=models.CharField(max_length=255, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='ruleset',
            field=models.JSONField(default=dict, verbose_name='ruleset configuration'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='status',
            field=models.CharField(default='draft', max_length=20, verbose_name='status'),
        ),
        migrations.AlterField(
            model_name='competition',
            name='technical_delegate',
            field=models.ForeignKey(limit_choices_to={'roles__contains': ['TECH_DELEGATE']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delegated_competitions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='competition',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='updated at'),
        ),
        migrations.CreateModel(
            name='Appeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='appeal reason')),
                ('evidence', models.JSONField(blank=True, null=True, verbose_name='evidence')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='submitted at')),
                ('status', models.CharField(default='pending', max_length=20, verbose_name='status')),
                ('decision', models.TextField(blank=True, verbose_name='decision')),
                ('decided_at', models.DateTimeField(blank=True, null=True, verbose_name='decided at')),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appeals', to='competitions.competition')),
                ('decided_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appeal_decisions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'appeal',
                'verbose_name_plural': 'appeals',
                'ordering': ['-submitted_at'],
            },
        ),
    ]
